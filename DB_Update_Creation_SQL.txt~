CREATE TABLE MEMBER (
	MemberID	 INTEGER 	 NOT NULL AUTO_INCREMENT, 
	FirstName	 VARCHAR(30), 	
	LastName	 VARCHAR(30), 
	BirthDate	 DATE, 
	JoinDate	 TIMESTAMP	 NOT NULL DEFAULT CURRENT_TIMESTAMP, 
	StreetAddress	 VARCHAR(50), 
	City		 VARCHAR(20), 
	State		 VARCHAR(20), 
	Zip		 VARCHAR(15), 
	HomePhone	 CHAR(12), 
	CellPhone	 CHAR(12), 
	Email		 VARCHAR(50), 
	EmergencyContact VARCHAR(100), 
	ReferredBy	 INTEGER, 
	Picture		 VARCHAR(100), 
	MembershipType	 VARCHAR(20), 

	PRIMARY KEY(MemberID), 
	FOREIGN KEY (ReferredBy) REFERENCES MEMBER(MemberID)

);

ALTER TABLE MEMBER AUTO_INCREMENT=17;


CREATE TABLE CERTIFICATION (
        CertName        VARCHAR(50)     NOT NULL,
        Description     TEXT,
        
        PRIMARY KEY(CertName)
);


CREATE TABLE MEMBER_CERTIFICATION (
        MemberID        INTEGER         NOT NULL,
        CertName        VARCHAR(50)     NOT NULL,
        
        PRIMARY KEY (MemberID, CertName),
        FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID),
        FOREIGN KEY (CertName) REFERENCES CERTIFICATION(CertName) 
);


CREATE TABLE COURSE (
        CourseID                INTEGER         NOT NULL AUTO_INCREMENT,
        CourseName              VARCHAR(50)     NOT NULL,
        CourseDescription       Text,
        CourseMemberFee         DECIMAL(6, 2),
        CourseNonMemberFee      DECIMAL(6, 2),
        
        PRIMARY KEY (CourseId)
);

ALTER TABLE COURSE AUTO_INCREMENT=17;


CREATE TABLE COURSE_CERTIFICATION (
        CourseID        INTEGER         NOT NULL,
        CertName        VARCHAR(50)     NOT NULL,
        
        PRIMARY KEY (CourseID, CertName),
        FOREIGN KEY (CourseID) REFERENCES COURSE(CourseID),
        FOREIGN KEY (CertName) REFERENCES CERTIFICATION(CertName)
);


CREATE TABLE CLASS (
        ClassReferenceNumber    INTEGER         NOT NULL AUTO_INCREMENT,
        ClassDate               Date,
        CourseID                INTEGER         NOT NULL,
        
        PRIMARY KEY (ClassReferenceNumber),
        FOREIGN KEY (CourseID) REFERENCES COURSE(CourseID)
);


CREATE TABLE PAYMENT (
        PaymentReferenceNumber  INTEGER         NOT NULL AUTO_INCREMENT,
        PaymentDate             TIMESTAMP       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        MemberID                INTEGER         NOT NULL,
        Amount                  DECIMAL(8, 2)   NOT NULL,
        Donation                CHAR(1)         NOT NULL DEFAULT 'N',
        
        PRIMARY KEY (PaymentReferenceNumber),
        FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID)
);


CREATE TABLE CLASS_ENROLLMENT (
        MemberID                INTEGER         NOT NULL,
        ClassReferenceNumber    INTEGER         NOT NULL,
        PaymentReferenceNumber  INTEGER,
        
        PRIMARY KEY (MemberID, ClassReferenceNumber),
        FOREIGN KEY (MemberId) REFERENCES MEMBER(MemberID),
        FOREIGN KEY (ClassReferenceNumber) REFERENCES CLASS(ClassReferenceNumber),
        FOREIGN KEY (PaymentReferenceNumber) REFERENCES PAYMENT(PaymentReferenceNumber)
);


CREATE TABLE EVENT (
        EventReferenceNumber    INTEGER         NOT NULL AUTO_INCREMENT,
        EventDate               DATE,
        EventName               VARCHAR(50)     NOT NULL,
        EventDescription        TEXT,
        EventMemberFee          DECIMAL(6, 2),
        EventNonMemberFee       DECIMAL(6, 2),
        
        PRIMARY KEY (EventReferenceNumber)
);


CREATE TABLE EVENT_ENROLLMENT (
        MemberID                INTEGER         NOT NULL,
        EventReferenceNumber    INTEGER         NOT NULL,
        PaymentReferenceNumber  INTEGER,
        
        PRIMARY KEY (MemberID, EventReferenceNumber),
        FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID),
        FOREIGN KEY (EventReferenceNumber) REFERENCES EVENT(EventReferenceNumber),
        FOREIGN KEY (PaymentReferenceNumber) REFERENCES PAYMENT(PaymentReferenceNumber)
);


CREATE TABLE LOGIN (
        LoginReferenceNumber    INTEGER         NOT NULL AUTO_INCREMENT,
        MemberID                INTEGER         NOT NULL,
        LoginTime               TIMESTAMP       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        LogoutTime              TIMESTAMP,
        
        PRIMARY KEY (LoginReferenceNumber),
        FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID)
);



CREATE TABLE EVENT_VOLUNTEER (
        MemberID                INTEGER         NOT NULL,
        LoginReferenceNumber    INTEGER         NOT NULL,
        EventReferenceNumber    INTEGER         NOT NULL,
        Role                    VARCHAR(20),
        
        PRIMARY KEY (MemberID, EventReferenceNumber),
        FOREIGN KEY (MemberId) REFERENCES MEMBER(MemberID),
        FOREIGN KEY (LoginReferenceNumber) REFERENCES LOGIN(LoginReferenceNumber),
        FOREIGN KEY (EventReferenceNumber) REFERENCES EVENT(EventReferencenumber)
);


CREATE TABLE CLASS_VOLUNTEER (
     ClassReferenceNumber     INTEGER   NOT NULL,
     MemberID                 INTEGER   NOT NULL,
     LoginReferenceNumber     INTEGER,
     
     PRIMARY KEY (ClassReferenceNumber, MemberId),
     FOREIGN KEY (ClassReferenceNumber) REFERENCES CLASS(ClassReferenceNumber),
     FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID),
     FOREIGN KEY (LoginReferenceNumber) REFERENCES LOGIN(LoginReferenceNumber)
);


CREATE TABLE NOTES (
     NoteTime  TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP, 
     MemberID  INTEGER        NOT NULL,
     NoteText  TEXT, 
     
     PRIMARY KEY (NoteTime, MemberID),
     FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID)
);

CREATE TABLE CLASSES_TAKEN (
  ClassReferenceNumber  INTEGER  NOT NULL,
  MemberID              INTEGER  NOT NULL,
  LoginReferenceNumber  INTEGER,

  PRIMARY KEY (ClassReferenceNumber, MemberID),
  FOREIGN KEY (ClassReferenceNumber) REFERENCES CLASS(ClassReferenceNumber),
  FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID),
  FOREIGN KEY (LoginReferenceNumber) REFERENCES LOGIN(LoginReferenceNumber)
);



























