CREATE TABLE MEMBER (
	MemberID	 INTEGER 	 NOT NULL AUTO_INCREMENT, 
	FirstName	 VARCHAR(30), 	
	LastName	 VARCHAR(30), 
	BirthDate	 DATE, 
	JoinDate	 TIMESTAMP	 NOT NULL DEFAULT CURRENT_TIMESTAMP, 
	StreetAddress	 VARCHAR(50), 
	City		 VARCHAR(20), 
	State		 VARCHAR(20), 
	Zip		 VARCHAR(15), 
	HomePhone	 CHAR(12), 
	CellPhone	 CHAR(12), 
	Email		 VARCHAR(50), 
	EmergencyContact VARCHAR(100), 
	ReferredBy	 INTEGER, 
	Picture		 VARCHAR(100), 
	MembershipType	 VARCHAR(20), 

	PRIMARY KEY(MemberID), 
	FOREIGN KEY (ReferredBy) REFERENCES MEMBER(MemberID)

);

ALTER TABLE MEMBER AUTO_INCREMENT=17;


CREATE TABLE CERTIFICATION (
        CertName        VARCHAR(50)     NOT NULL,
        Description     TEXT,
        
        PRIMARY KEY(CertName)
);


CREATE TABLE MEMBER_CERTIFICATION (
        MemberID        INTEGER         NOT NULL,
        CertName        VARCHAR(50)     NOT NULL,
        
        PRIMARY KEY (MemberID, CertName),
        FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID),
        FOREIGN KEY (CertName) REFERENCES CERTIFICATION(CertName) 
);


CREATE TABLE COURSE (
        CourseID                INTEGER         NOT NULL AUTO_INCREMENT,
        CourseName              VARCHAR(50)     NOT NULL,
        CourseDescription       Text,
        CourseMemberFee         DECIMAL(6, 2),
        CourseNonMemberFee      DECIMAL(6, 2),
        
        PRIMARY KEY (CourseId)
);

ALTER TABLE COURSE AUTO_INCREMENT=17;


CREATE TABLE COURSE_CERTIFICATION (
        CourseID        INTEGER         NOT NULL,
        CertName        VARCHAR(50)     NOT NULL,
        
        PRIMARY KEY (CourseID, CertName),
        FOREIGN KEY (CourseID) REFERENCES COURSE(CourseID),
        FOREIGN KEY (CertName) REFERENCES CERTIFICATION(CertName)
);


CREATE TABLE CLASS (
        ClassReferenceNumber    INTEGER         NOT NULL AUTO_INCREMENT,
        ClassDate               Date,
        CourseID                INTEGER         NOT NULL,
        
        PRIMARY KEY (ClassReferenceNumber),
        FOREIGN KEY (CourseID) REFERENCES COURSE(CourseID)
);


CREATE TABLE PAYMENT (
        PaymentReferenceNumber  INTEGER         NOT NULL AUTO_INCREMENT,
        PaymentDate             TIMESTAMP       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        MemberID                INTEGER         NOT NULL,
        Amount                  DECIMAL(8, 2)   NOT NULL,
        Donation                CHAR(1)         NOT NULL DEFAULT 'N',
        
        PRIMARY KEY (PaymentReferenceNumber),
        FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID)
);


CREATE TABLE CLASS_ENROLLMENT (
        MemberID                INTEGER         NOT NULL,
        ClassReferenceNumber    INTEGER         NOT NULL,
        PaymentReferenceNumber  INTEGER,
        
        PRIMARY KEY (MemberID, ClassReferenceNumber),
        FOREIGN KEY (MemberId) REFERENCES MEMBER(MemberID),
        FOREIGN KEY (ClassReferenceNumber) REFERENCES CLASS(ClassReferenceNumber),
        FOREIGN KEY (PaymentReferenceNumber) REFERENCES PAYMENT(PaymentReferenceNumber)
);


CREATE TABLE EVENT (
        EventReferenceNumber    INTEGER         NOT NULL AUTO_INCREMENT,
        EventDate               DATE,
        EventName               VARCHAR(50)     NOT NULL,
        EventDescription        TEXT,
        EventMemberFee          DECIMAL(6, 2),
        EventNonMemberFee       DECIMAL(6, 2),
        
        PRIMARY KEY (EventReferenceNumber)
);


CREATE TABLE EVENT_ENROLLMENT (
        MemberID                INTEGER         NOT NULL,
        EventReferenceNumber    INTEGER         NOT NULL,
        PaymentReferenceNumber  INTEGER,
        
        PRIMARY KEY (MemberID, EventReferenceNumber),
        FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID),
        FOREIGN KEY (EventReferenceNumber) REFERENCES EVENT(EventReferenceNumber),
        FOREIGN KEY (PaymentReferenceNumber) REFERENCES PAYMENT(PaymentReferenceNumber)
);


CREATE TABLE LOGIN (
        LoginReferenceNumber    INTEGER         NOT NULL AUTO_INCREMENT,
        MemberID                INTEGER         NOT NULL,
        LoginTime               TIMESTAMP       NOT NULL DEFAULT CURRENT_TIMESTAMP,
        LogoutTime              TIMESTAMP,
        
        PRIMARY KEY (LoginReferenceNumber),
        FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID)
);



CREATE TABLE EVENT_VOLUNTEER (
        MemberID                INTEGER         NOT NULL,
        LoginReferenceNumber    INTEGER         NOT NULL,
        EventReferenceNumber    INTEGER         NOT NULL,
        Role                    VARCHAR(20),
        
        PRIMARY KEY (MemberID, EventReferenceNumber),
        FOREIGN KEY (MemberId) REFERENCES MEMBER(MemberID),
        FOREIGN KEY (LoginReferenceNumber) REFERENCES LOGIN(LoginReferenceNumber),
        FOREIGN KEY (EventReferenceNumber) REFERENCES EVENT(EventReferencenumber)
);


CREATE TABLE CLASS_VOLUNTEER (
     ClassReferenceNumber     INTEGER   NOT NULL,
     MemberID                 INTEGER   NOT NULL,
     LoginReferenceNumber     INTEGER,
     
     PRIMARY KEY (ClassReferenceNumber, MemberId),
     FOREIGN KEY (ClassReferenceNumber) REFERENCES CLASS(ClassReferenceNumber),
     FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID),
     FOREIGN KEY (LoginReferenceNumber) REFERENCES LOGIN(LoginReferenceNumber)
);


CREATE TABLE NOTES (
     NoteTime  TIMESTAMP      NOT NULL DEFAULT CURRENT_TIMESTAMP, 
     MemberID  INTEGER        NOT NULL,
     NoteText  TEXT, 
     
     PRIMARY KEY (NoteTime, MemberID),
     FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID)
);

CREATE TABLE CLASS_TAKEN (
  ClassReferenceNumber  INTEGER  NOT NULL,
  MemberID              INTEGER  NOT NULL,
  LoginReferenceNumber  INTEGER,

  PRIMARY KEY (ClassReferenceNumber, MemberID),
  FOREIGN KEY (ClassReferenceNumber) REFERENCES CLASS(ClassReferenceNumber),
  FOREIGN KEY (MemberID) REFERENCES MEMBER(MemberID),
  FOREIGN KEY (LoginReferenceNumber) REFERENCES LOGIN(LoginReferenceNumber)
);

CREATE TABLE EVENT_ATTENDED (
    EventReferenceNumber    INTEGER NOT NULL,
    MemberID                INTEGER NOT NULL,
    LoginReferenceNumber    INTEGER,

    PRIMARY KEY (EventReferenceNumber, MemberID),
    FOREIGN KEY (EventReferenceNumber) REFERENCES EVENT(EventReferenceNumber),
    FOREIGN KEY (MemberID)             REFERENCES MEMBER(MemberID),
    FOREIGN KEY (LoginReferenceNumber) REFERENCES LOGIN(LoginReferenceNumber)
);

CREATE TABLE FACILITY (
  FacilityID            INTEGER  NOT NULL AUTO_INCREMENT,
  FacilityName          VARCHAR(50),
  FacilityDescription   TEXT,

  PRIMARY KEY (FacilityID)
);

CREATE TABLE SUB_FACILITY (
    PrimaryFacilityID       INTEGER NOT NULL,
    SubFacilityID           INTEGER NOT NULL,

    PRIMARY KEY (PrimaryFacilityID, SubFacilityID),
    FOREIGN KEY (PrimaryFacilityID) REFERENCES FACILITY(FacilityID),
    FOREIGN KEY (SubFacilityID)     REFERENCES FACILITY(FacilityID)
);

CREATE TABLE EVENT_FACILITY (
    EventReferenceNumber    INTEGER NOT NULL,
    FacilityID              INTEGER NOT NULL,

    PRIMARY KEY (EventReferenceNumber, FacilityID),
    FOREIGN KEY (EventReferenceNumber) REFERENCES EVENT(EventReferenceNumber),
    FOREIGN KEY (FacilityID)           REFERENCES FACILITY(FacilityID)
);

CREATE TABLE COURSE_FACILITY (
    CourseID        INTEGER NOT NULL,
    FacilityID      INTEGER NOT NULL,

    PRIMARY KEY (CourseID, FacilityID),
    FOREIGN KEY (CourseID)      REFERENCES COURSE(CourseID),
    FOREIGN KEY (FacilityID)    REFERENCES FACILITY(FacilityID)
);

--------------------SQL TO CREATE PENDING_CLASSES VIEW--------------------------

CREATE VIEW PENDING_CLASSES AS
  SELECT ClassReferenceNumber AS ReferenceNumber, ClassDate AS Date, CourseName
  AS Name, CourseMemberFee AS MemberFee, CourseNonMemberFee AS NonMemberFee FROM
  CLASS AS A, COURSE AS B WHERE A.CourseID = B.CourseID AND ClassDate >= CURDATE();



------------------SQL TO CREATE PENDING_EVENTS VIEW-----------------------------

CREATE VIEW PENDING_EVENTS AS
  SELECT EventReferenceNumber AS ReferenceNumber, EventDate AS Date, EventName
  AS Name, EventMemberFee AS MemberFee, EventNonMemberFee AS NonMemberFee from
  EVENT WHERE EventDate >= CURDATE();



-----------------SQL TO CREATE PENDING_ENROLLMENTS VIEW-------------------------

CREATE VIEW PENDING_ENROLLMENTS AS
    SELECT A.MemberID, B.ClassReferenceNumber AS ReferenceNumber, C.CourseName AS Name,
     B.ClassDate AS Date, 'CLASS' AS Type FROM CLASS_ENROLLMENT AS A, CLASS AS B, COURSE AS C WHERE A.ClassReferenceNumber =
     B.ClassReferenceNumber AND B.CourseID = C.CourseID AND B.ClassDate >= CURDATE()
     UNION
     SELECT A.MemberID, B.EventReferenceNumber AS ReferenceNumber, B.EventName AS Name,
     B.EventDate AS Date, 'EVENT' AS Type FROM EVENT_ENROLLMENT AS A, EVENT AS B WHERE A.EventReferenceNumber =
     B.EventReferenceNumber AND B.EventDate >= CURDATE();


-----------------SQL TO CREATE PENDING_ALL VIEW--------------------------------

CREATE VIEW PENDING_ALL AS
    SELECT *, 'CLASS' AS Type FROM PENDING_CLASSES
    UNION
    SELECT *, 'EVENT' AS Type FROM PENDING_EVENTS;


-----------------SQL TO CREATE ALL_ENROLLMENTS VIEW----------------------------

CREATE VIEW ALL_ENROLLMENTS AS
    SELECT A.MemberID, B.ClassReferenceNumber AS ReferenceNumber, C.CourseName AS Name,
     B.ClassDate AS Date, A.PaymentReferenceNumber, 'CLASS' AS Type FROM CLASS_ENROLLMENT AS A, CLASS AS B, COURSE AS C WHERE A.ClassReferenceNumber =
     B.ClassReferenceNumber AND B.CourseID = C.CourseID
     UNION
     SELECT A.MemberID, B.EventReferenceNumber AS ReferenceNumber, B.EventName AS Name,
     B.EventDate AS Date, A.PaymentReferenceNumber, 'EVENT' AS Type FROM EVENT_ENROLLMENT AS A, EVENT AS B WHERE A.EventReferenceNumber =
     B.EventReferenceNumber;

-----------------SQL TO CREATE PAYMENT_WITH_NAME VIEW--------------------------

CREATE VIEW PAYMENT_WITH_NAME AS
    SELECT A.PaymentReferenceNumber, A.PaymentDate, A.MemberID, A.Amount, A.Reason, B.Name
    FROM PAYMENT AS A LEFT OUTER JOIN ALL_ENROLLMENTS AS B ON B.PaymentReferenceNumber = A.PaymentReferenceNumber;

----------------SQL TO CREATE COURSE_FACILITY_WITH_NAME VIEW-------------------

CREATE VIEW COURSE_FACILITY_WITH_NAME AS
    SELECT A.CourseID, A.FacilityID, B.FacilityName FROM COURSE_FACILITY AS A
    JOIN FACILITY AS B ON A.FacilityID = B.FacilityID;

---------------SQL TO CREATE FACILITY_SCHEDULE VIEW-----------------------------

CREATE VIEW FACILITY_SCHEDULE AS
    SELECT A.ClassReferenceNumber AS ReferenceNumber, A.ClassDate AS StartTime,
    ADDTIME(A.ClassDate, B.Duration) AS EndTime, C.FacilityID, 'CLASS' AS Type FROM CLASS AS A JOIN
    COURSE AS B ON A.CourseID = B.CourseID JOIN COURSE_FACILITY AS C ON B.CourseID = C.CourseID
    UNION
    SELECT A.EventReferenceNumber AS ReferenceNumber, A.EventDate AS StartTime,
    ADDTIME(A.EventDate, A.Duration) AS EndTime, B.FacilityID, 'EVENT' AS Type FROM EVENT AS A JOIN
    EVENT_FACILITY AS B ON A.EventReferenceNumber = B.EventReferenceNumber;

























